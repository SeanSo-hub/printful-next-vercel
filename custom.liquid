<!DOCTYPE html>
<html lang="{{ request.locale.iso_code }}">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>{{ page_title }}</title>
  {{ content_for_header }}
  <style>
    /* CSS Variables for better maintainability */
    :root {
      --primary-color: #007bff;
      --primary-hover-color: #0056b3;
      --success-color: #28a745;
      --success-hover-color: #218838;
      --text-dark: #333;
      --text-medium: #666;
      --text-light: #555;
      --background-light: #f8f9fa;
      --background-white: white;
      --shadow-light: rgba(0, 0, 0, 0.1);
      --shadow-hover: rgba(0, 0, 0, 0.15);
      --border-radius-card: 12px;
      --border-radius-button: 6px;
      --spacing-base: 10px;
      --spacing-medium: 30px;
      --spacing-large: 40px;
    }

    .printful-catalog {
      max-width: 1240px;
      margin: 0 auto;
      padding: var(--spacing-base);
    }
    .catalog-header {
      text-align: center;
      margin-bottom: var(--spacing-large);
    }
    .catalog-title {
      font-size: 2.5rem;
      font-weight: bold;
      color: var(--text-dark);
      margin-bottom: 10px;
    }
    .catalog-subtitle {
      font-size: 1.1rem;
      color: var(--text-medium);
    }
    .products-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      gap: var(--spacing-medium);
      margin-bottom: var(--spacing-large);
    }
    .product-card {
      background: var(--background-white);
      border-radius: var(--border-radius-card);
      box-shadow: 0 4px 6px var(--shadow-light);
      overflow: hidden;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      cursor: pointer; 
    }
    .product-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 8px 25px var(--shadow-hover);
    }
    .product-image {
      width: 100%;
      height: 280px;
      object-fit: contain;
      background: #f2f3f2;
    }
    .product-image-placeholder {
      width: 100%;
      height: 280px;
      background: #f2f3f2;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 3rem;
      color: #ccc;
    }
    .product-info {
      padding: var(--spacing-base);
      text-align: center;
    }
    .product-name {
      font-size: 1.8rem;
      font-weight: 600;
      color: var(--text-dark);
      line-height: 1.4;
    }
    .loading {
      text-align: center;
      padding: 60px var(--spacing-base);
    }
    .loading-spinner {
      display: inline-block;
      width: 40px;
      height: 40px;
      border: 4px solid #f3f3f3;
      border-top: 4px solid var(--primary-color);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: var(--spacing-base);
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    .error {
      background: #f8d7da; /* Specific error background */
      border: 1px solid #f5c6cb; /* Specific error border */
      color: #721c24; /* Specific error text color */
      padding: var(--spacing-base);
      border-radius: 8px;
      text-align: center;
      margin: var(--spacing-base) 0;
    }
    .error-details {
        font-size: 0.9em;
        margin-top: 10px;
        color: #721c24;
        word-break: break-all; /* Helps with long error messages */
    }
    .retry-button {
      background: var(--primary-color);
      color: var(--background-white);
      border: none;
      padding: 10px var(--spacing-base);
      border-radius: var(--border-radius-button);
      cursor: pointer;
      font-size: 1rem;
      margin-top: 15px;
      transition: background 0.2s ease;
    }
    .retry-button:hover {
      background: var(--primary-hover-color);
    }
    .no-products {
      text-align: center;
      padding: 60px var(--spacing-base);
      color: var(--text-medium);
    }
    .no-products-icon {
      font-size: 4rem;
      margin-bottom: var(--spacing-base);
    }
    @media (max-width: 768px) {
      .products-grid {
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: var(--spacing-base);
      }
      .catalog-title {
        font-size: 2rem;
      }
      .printful-catalog {
        padding: 15px; /* Slightly less padding on smaller screens */
      }
    }

    /* Modal Styles */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 9999;
      opacity: 0; /* Start hidden for transition */
      visibility: hidden; /* Start hidden for transition */
      transition: opacity 0.3s ease, visibility 0.3s ease;
    }
    .modal-overlay.show {
        opacity: 1;
        visibility: visible;
    }
    .modal-content {
      background: var(--background-white);
      border-radius: var(--border-radius-card);
      padding: var(--spacing-medium);
      max-width: 600px;
      width: 100%;
      position: relative;
      text-align: justify;
      transform: translateY(20px); 
      transition: transform 0.3s ease;
    }
    .modal-overlay.show .modal-content {
        transform: translateY(0);
    }
    .modal-close {
      position: absolute;
      top: 12px;
      right: 16px;
      font-size: 1.5rem;
      cursor: pointer;
      color: var(--text-medium);
      transition: color 0.2s ease;
    }
    .modal-close:hover {
        color: var(--text-dark);
    }
    .modal-image img {
      width: 100%;
      max-height: 300px;
      object-fit: contain;
      border-radius: 10px;
    }
    .modal-title {
      font-size: 2rem;
      margin: var(--spacing-base) 0 10px;
      color: var(--text-dark);
    }
    .modal-description {
      color: var(--text-light);
      margin-bottom: var(--spacing-base);
    }
    .modal-variants {
      list-style: none;
      padding: 0;
      margin-bottom: var(--spacing-base);
    }
    .modal-variants li {
      margin: 5px 0;
      font-size: 1rem;
      color: var(--text-dark);
    }
    .customize-button {
      background: var(--success-color);
      color: var(--background-white);
      padding: 10px var(--spacing-base);
      border-radius: var(--border-radius-button);
      border: none;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.2s ease;
    }
    .customize-button:hover {
      background: var(--success-hover-color);
    }

  </style>
</head>

<body>
  <div class="printful-catalog">
    <div class="catalog-header">
      <h1 class="catalog-title">Printful Products</h1>
      <p class="catalog-subtitle">Discover our custom merchandise</p>
    </div>
    <div id="products-container">
    </div>

    <div id="product-modal" class="modal-overlay">
      <div class="modal-content">
        <span class="modal-close" role="button" aria-label="Close modal">×</span>
        <div id="modal-product-image" class="modal-image"></div>
        <h2 id="modal-product-name" class="modal-title"></h2>
        <p id="modal-product-description" class="modal-description"></p>
        <ul id="modal-product-variants" class="modal-variants"></ul>
        <button id="modal-customize-button" class="customize-button">Customize</button>
      </div>
    </div>

  </div>

  <script>
    const API_ENDPOINT = 'https://customizer-app-backend.vercel.app/api/printful/v2/catalog-products';
    const productsContainer = document.getElementById('products-container');
    const productModal = document.getElementById('product-modal');
    const modalCloseButton = productModal.querySelector('.modal-close');
    const modalProductImage = document.getElementById('modal-product-image');
    const modalProductName = document.getElementById('modal-product-name');
    const modalProductDescription = document.getElementById('modal-product-description');
    const modalProductVariants = document.getElementById('modal-product-variants');
    const modalCustomizeButton = document.getElementById('modal-customize-button');

    let allProducts = []; // Store fetched products to avoid re-parsing for modal

    async function fetchProducts() {
      // Always start with loading state
      updateUI({ products: [], loading: true, error: null });

      try {
        const response = await fetch(API_ENDPOINT, {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' }
        });

        if (!response.ok) {
            const errorText = await response.text(); // Get raw error response
            throw new Error(`HTTP error! Status: ${response.status} - ${errorText || 'Unknown error'}`);
        }

        const data = await response.json();
        // Assume 'data' directly contains the array of products, or it's within 'data.data'
        allProducts = Array.isArray(data) ? data : (data.data || []); // Update global products array
        updateUI({ products: allProducts, loading: false, error: null });

      } catch (err) {
        updateUI({ products: [], loading: false, error: err.message });
      }
    }

    function updateUI({ products, loading, error }) {
      if (loading) {
        productsContainer.innerHTML = `
          <div class="loading">
            <div class="loading-spinner" role="status" aria-label="Loading products"></div>
            <p>Loading products...</p>
          </div>`;
        return;
      }

      if (error) {
        productsContainer.innerHTML = `
          <div class="error" role="alert">
            <h3>Error Loading Products</h3>
            <p>We couldn't load the products. Please try again.</p>
            <p class="error-details">Details: ${error}</p>
            <button class="retry-button" onclick="fetchProducts()">Try Again</button>
          </div>`;
        return;
      }

      if (!products.length) {
        productsContainer.innerHTML = `
          <div class="no-products">
            <div class="no-products-icon" aria-hidden="true">📦</div>
            <h3>No Products Found</h3>
            <p>There are no products available at the moment.</p>
          </div>`;
        return;
      }

      const productsHTML = products.map(product => `
        <div class="product-card" data-product-id="${product.id}">
          ${product.image
            ? `<img src="${product.image}" alt="${product.name}" class="product-image" loading="lazy">`
            : `<div class="product-image-placeholder" aria-hidden="true">🖼️</div>`}
          <div class="product-info">
            <h3 class="product-name">${product.name}</h3>
          </div>
        </div>
      `).join('');

      productsContainer.innerHTML = `<div class="products-grid">${productsHTML}</div>`;
    }

    // --- Modal Logic ---
    function openModal(productId) {
      const product = allProducts.find(p => String(p.id) === String(productId));

      if (!product) {
        console.error('Product not found for ID:', productId, 'in allProducts:', allProducts);
        return;
      }

      modalProductImage.innerHTML = product.image
        ? `<img src="${product.image}" alt="${product.name}" loading="lazy">`
        : `<div class="product-image-placeholder" aria-hidden="true">🖼️</div>`;
      modalProductName.textContent = product.name || 'Unnamed Product';
      modalProductDescription.textContent = product.description || 'No description available.';

      modalProductVariants.innerHTML = '';
      if (Array.isArray(product.variants) && product.variants.length) {
        product.variants.forEach(variant => {
          const li = document.createElement('li');
          li.textContent = variant.name || `Variant ID: ${variant.id}`;
          modalProductVariants.appendChild(li);
        });
      } else {
        modalProductVariants.innerHTML = '<li>No variants available.</li>';
      }

      // For printful EDM
      modalCustomizeButton.onclick = () => {
      alert(`Customize clicked for Product ID: ${product.id}`);
      };

      productModal.classList.add('show');
    }

    function closeModal() {
      productModal.classList.remove('show');
    }

    // Event Listeners
    document.addEventListener('DOMContentLoaded', fetchProducts);

    // Event delegation for product card clicks
    productsContainer.addEventListener('click', function(event) {
      const productCard = event.target.closest('.product-card');
      if (productCard) {
        const productId = productCard.dataset.productId;
        if (productId) {
          openModal(productId);
        }
      }
    });

    // Close modal on button click
    modalCloseButton.addEventListener('click', closeModal);

    // Close modal if user clicks outside modal-content
    productModal.addEventListener('click', function (e) {
      if (e.target === this) closeModal();
    });

    // Close modal on Escape key press
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && productModal.classList.contains('show')) {
            closeModal();
        }
    });

  </script>
</body>
</html>